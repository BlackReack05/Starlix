local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local Window = Rayfield:CreateWindow({
   Name = "Plot ESP Menu",
   LoadingTitle = "Plot Tools",
   LoadingSubtitle = "RemainingTime + Rarity ESP",
   ConfigurationSaving = {
      Enabled = false
   }
})

local RunService = game:GetService("RunService")

local espEnabledTime = false
local espEnabledRaritySecret = false
local espEnabledRarityMythic = false
local espTimeObjects = {}
local espRarityObjects = {}

local function tryGetText(inst)
    local ok, res = pcall(function()
        if inst and (inst:IsA("TextLabel") or inst:IsA("TextBox")) then
            return inst.Text
        end
    end)
    return ok and res or nil
end

local function parseRemainingText(txt)
    if not txt then return nil end
    txt = tostring(txt):gsub("%s+", ""):lower()
    if txt:match("^0") then
        return { unlocked = true, display = "Unlocked" }
    end
    local num = txt:match("(%d+)")
    if num then
        return { unlocked = false, display = num .. "s" }
    end
    return { unlocked = false, display = txt }
end

local function createTimeESP(plot)
    if espTimeObjects[plot] then return end
    local purchases = plot:FindFirstChild("Purchases")
    if not purchases then return end
    local block = purchases:FindFirstChild("PlotBlock")
    if not block then return end
    local main = block:FindFirstChild("Main")
    if not main then return end
    local billboard = main:FindFirstChild("BillboardGui")
    if not billboard then return end
    local sourceLabel = billboard:FindFirstChild("RemainingTime")
    if not sourceLabel or not sourceLabel:IsA("TextLabel") then return end

    local esp = Instance.new("BillboardGui")
    esp.Name = "RemainingTimeESP"
    esp.AlwaysOnTop = true
    esp.Size = UDim2.new(0, 300, 0, 80)
    esp.StudsOffset = Vector3.new(0, 6, 0)
    esp.MaxDistance = 1e6

    local textLabel = Instance.new("TextLabel")
    textLabel.Size = UDim2.new(1, 0, 1, 0)
    textLabel.BackgroundTransparency = 1
    textLabel.Font = Enum.Font.SourceSansBold
    textLabel.TextScaled = true
    textLabel.TextStrokeTransparency = 0
    textLabel.TextColor3 = Color3.fromRGB(255, 50, 50)
    textLabel.Parent = esp

    esp.Parent = main

    espTimeObjects[plot] = {
        Billboard = esp,
        SourceLabel = sourceLabel,
        TextLabel = textLabel
    }
end

local function removeTimeESP(plot)
    if espTimeObjects[plot] then
        espTimeObjects[plot].Billboard:Destroy()
        espTimeObjects[plot] = nil
    end
end

local function createRarityESP(podium)
    if espRarityObjects[podium] then return end
    local base = podium:FindFirstChild("Base")
    if not base then return end
    local spawn = base:FindFirstChild("Spawn")
    if not spawn then return end
    local attachment = spawn:FindFirstChild("Attachment")
    if not attachment then return end
    local overhead = attachment:FindFirstChild("AnimalOverhead")
    if not overhead then return end
    local rarityLabel = overhead:FindFirstChild("Rarity")
    if not rarityLabel or not rarityLabel:IsA("TextLabel") then return end

    local esp = Instance.new("BillboardGui")
    esp.Name = "RarityESP"
    esp.AlwaysOnTop = true
    esp.Size = UDim2.new(0, 250, 0, 60)
    esp.StudsOffset = Vector3.new(0, 7, 0)
    esp.MaxDistance = 1e6

    local textLabel = Instance.new("TextLabel")
    textLabel.Size = UDim2.new(1, 0, 1, 0)
    textLabel.BackgroundTransparency = 1
    textLabel.Font = Enum.Font.SourceSansBold
    textLabel.TextScaled = true
    textLabel.TextStrokeTransparency = 0
    textLabel.TextColor3 = Color3.fromRGB(50, 50, 50)
    textLabel.Text = ""
    textLabel.Parent = esp

    esp.Parent = podium

    espRarityObjects[podium] = {
        Billboard = esp,
        SourceLabel = rarityLabel,
        TextLabel = textLabel
    }
end

local function removeRarityESP(podium)
    if espRarityObjects[podium] then
        espRarityObjects[podium].Billboard:Destroy()
        espRarityObjects[podium] = nil
    end
end

RunService.RenderStepped:Connect(function()
    if espEnabledTime then
        for plot, data in pairs(espTimeObjects) do
            local raw = tryGetText(data.SourceLabel)
            local parsed = parseRemainingText(raw)
            if parsed then
                if parsed.unlocked then
                    data.TextLabel.Text = parsed.display
                    data.TextLabel.TextColor3 = Color3.fromRGB(80, 220, 120)
                else
                    data.TextLabel.Text = parsed.display
                    data.TextLabel.TextColor3 = Color3.fromRGB(255, 50, 50)
                end
            end
        end
    end

    for podium, data in pairs(espRarityObjects) do
        local txt = tryGetText(data.SourceLabel)
        if txt then
            if espEnabledRaritySecret and txt:lower() == "secret" then
                data.TextLabel.Text = "Secret"
                data.TextLabel.TextColor3 = Color3.fromRGB(40, 40, 40)
            elseif espEnabledRarityMythic and txt:lower() == "mythic" then
                data.TextLabel.Text = "Mythic"
                data.TextLabel.TextColor3 = Color3.fromRGB(150, 50, 200) -- viola acceso
            else
                data.TextLabel.Text = ""
            end
        end
    end
end)

local function toggleTimeESP(state)
    espEnabledTime = state
    if espEnabledTime then
        local plotsFolder = workspace:WaitForChild("Plots")
        for _, plot in ipairs(plotsFolder:GetChildren()) do
            createTimeESP(plot)
        end
        plotsFolder.ChildAdded:Connect(function(plot)
            task.wait(0.5)
            if espEnabledTime then
                createTimeESP(plot)
            end
        end)
    else
        for plot, _ in pairs(espTimeObjects) do
            removeTimeESP(plot)
        end
    end
end

local function toggleRarityESPSecret(state)
    espEnabledRaritySecret = state
    if espEnabledRaritySecret or espEnabledRarityMythic then
        local plotsFolder = workspace:WaitForChild("Plots")
        for _, plot in ipairs(plotsFolder:GetChildren()) do
            local podiums = plot:FindFirstChild("AnimalPodiums")
            if podiums then
                for _, podium in ipairs(podiums:GetChildren()) do
                    createRarityESP(podium)
                end
                podiums.ChildAdded:Connect(function(podium)
                    task.wait(0.5)
                    if espEnabledRaritySecret or espEnabledRarityMythic then
                        createRarityESP(podium)
                    end
                end)
            end
        end
    else
        for podium, _ in pairs(espRarityObjects) do
            removeRarityESP(podium)
        end
    end
end

local function toggleRarityESPMythic(state)
    espEnabledRarityMythic = state
    toggleRarityESPSecret(espEnabledRaritySecret) -- usa la stessa funzione di init/clean
end

local espTab = Window:CreateTab("ESP")

espTab:CreateToggle({
    Name = "RemainingTime ESP",
    CurrentValue = false,
    Flag = "espTime",
    Callback = function(state)
        toggleTimeESP(state)
    end
})

espTab:CreateToggle({
    Name = "Secret Rarity ESP",
    CurrentValue = false,
    Flag = "espRaritySecret",
    Callback = function(state)
        toggleRarityESPSecret(state)
    end
})

espTab:CreateToggle({
    Name = "Mythic Rarity ESP",
    CurrentValue = false,
    Flag = "espRarityMythic",
    Callback = function(state)
        toggleRarityESPMythic(state)
    end
})
